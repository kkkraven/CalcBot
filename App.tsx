
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { ChatWindow } from './components/ChatWindow';
import { LoadingSpinner } from './components/LoadingSpinner';
import { ErrorMessage as ChatErrorMessage } from './components/ErrorMessage';
import { QuickActions } from './components/QuickActions';
import { LoadingState } from './components/LoadingState';
import { ToastContainer, ToastType } from './components/Toast';
import { CalculatorIcon } from './components/icons/CalculatorIcon';
import MonitoringDashboard from './components/MonitoringDashboard';
import type { FormData, PackagingCostResponse, ChatMessage, AppStep } from './types';
import { ProductType }  from './types';
import { 
  estimatePackagingCost, 
  parseOrderFromStringWithGemini, 
  parsePriceCorrectionFeedback,
  estimatePackagingCostWithKnowledgeBase,
  parseOrderFromStringWithGeminiOptimized,
  saveOrderToKnowledgeBase,
  getTokenUsageStats
} from './services/geminiService';
import { knowledgeBase } from './services/knowledgeBase';
import { logger } from './services/monitoringService';

const App: React.FC = () => {
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>(() => [
    {
      id: Date.now().toString(),
      text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–∫–ª—é—á–∞—è –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏—Ä–∞–∂–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500/1000 —à—Ç).",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [formData, setFormData] = useState<Partial<FormData>[]>([]);
  const [lastCalculatedFormData, setLastCalculatedFormData] = useState<Partial<FormData>[] | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [appStep, setAppStep] = useState<AppStep>('awaiting_description');
  const [savedOrderIds, setSavedOrderIds] = useState<string[]>([]);
  const [showStats, setShowStats] = useState<boolean>(false);
  const [toasts, setToasts] = useState<Array<{
    id: string;
    type: ToastType;
    title: string;
    message?: string;
    duration?: number;
  }>>([]);

  const prevAppStepRef = useRef<AppStep>(appStep);

  const addMessage = useCallback((text: string, sender: ChatMessage['sender'], isLoadingSpinner = false) => {
    setChatMessages(prev => [...prev, { id: Date.now().toString(), text, sender, timestamp: new Date(), isLoading: isLoadingSpinner }]);
  }, []);

  const addToast = useCallback((type: ToastType, title: string, message?: string, duration?: number) => {
    const id = Date.now().toString();
    setToasts(prev => [...prev, { id, type, title, message, duration }]);
  }, []);

  const removeToast = useCallback((id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  }, []);

  const translateKeyToRussian = useCallback((key: keyof FormData): string => {
    const translations: Record<keyof FormData, string> = {
        parsedUserRequest: "–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
        productType: "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
        specificBoxType: "–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏",
        material: "–ú–∞—Ç–µ—Ä–∏–∞–ª",
        specificMaterialName: "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        materialDensity: "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≥/–º¬≤)",
        width: "–®–∏—Ä–∏–Ω–∞ (–º–º)",
        height: "–í—ã—Å–æ—Ç–∞ (–º–º)",
        depth: "–ì–ª—É–±–∏–Ω–∞ (–º–º)",
        quantity: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç)",
        printColorsOuter: "–¶–≤–µ—Ç–Ω–æ—Å—Ç—å —Å–Ω–∞—Ä—É–∂–∏",
        printColorsInner: "–¶–≤–µ—Ç–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏",
        printType: "–¢–∏–ø –ø–µ—á–∞—Ç–∏",
        finishes: "–û—Ç–¥–µ–ª–∫–∞",
        handleType: "–¢–∏–ø —Ä—É—á–µ–∫",
        handleAttachment: "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä—É—á–µ–∫",
        fittings: "–§—É—Ä–Ω–∏—Ç—É—Ä–∞",
        additionalInfo: "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    };
    return translations[key] || key;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const showKnowledgeBaseStats = useCallback(() => {
    const stats = knowledgeBase.getStats();
    const tokenStats = getTokenUsageStats();
    
    const statsMessage = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.totalOrders}
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${stats.ordersWithActualPrices}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${(stats.averagePriceAccuracy * 100).toFixed(1)}%

üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü):
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokenStats.tokens.toLocaleString()}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${tokenStats.cost.toFixed(2)}

${stats.recentOrders.length > 0 ? '\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:' : ''}
${stats.recentOrders.slice(0, 3).map(order => 
  `‚Ä¢ ${order.productType} ${order.quantity}—à—Ç - ${order.pricePerUnit}¬•${order.actualPrice ? ` (—Ä–µ–∞–ª—å–Ω–∞—è: ${order.actualPrice}¬•)` : ''}`
).join('\n')}`;

    addMessage(statsMessage, 'bot');
  }, [addMessage]);

  useEffect(() => {
    const previousStep = prevAppStepRef.current;

    if (appStep === 'awaiting_confirmation' && previousStep === 'parsing_description') {
      if (formData.length > 0 && formData.every(fd => fd.parsedUserRequest && Object.keys(fd).length > 1)) {
        let confirmationText = "–Ø –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ —Ç–∞–∫:\n";
        formData.forEach((variant, index) => {
            confirmationText += `\n--- –í–∞—Ä–∏–∞–Ω—Ç ${index + 1} ---\n`;
            for (const [key, value] of Object.entries(variant)) {
                if (value !== undefined && value !== null && value !== '' && key !== 'parsedUserRequest') {
                    let displayValue = value;
                    if (Array.isArray(value)) {
                        displayValue = value.join(', ');
                    } else if (typeof value === 'object') {
                        displayValue = JSON.stringify(value);
                    }
                    confirmationText += `- ${translateKeyToRussian(key as keyof FormData)}: ${displayValue}\n`;
                }
            }
        });
        confirmationText += "\n–í—Å–µ –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)";
        addMessage(confirmationText, 'bot');
      } else {
         addMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.", 'error');
         setAppStep('awaiting_description');
         setFormData([]);
      }
    } else if (appStep === 'displaying_result' && previousStep === 'calculating_cost') {
        setLastCalculatedFormData(formData); 
        addMessage("–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Ü–µ–Ω–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è 500—à—Ç - 9.0') –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.", 'bot');
        setAppStep('awaiting_feedback_or_new_order');
    }

    if (previousStep !== appStep) {
      prevAppStepRef.current = appStep;
    }
  }, [appStep, formData, addMessage, translateKeyToRussian, setAppStep, setFormData, setLastCalculatedFormData]);

  const handleUserInput = async (userInput: string) => {
    logger.info('User input received', undefined, { 
      inputLength: userInput.length,
      appStep 
    });
    
    addMessage(userInput, 'user');
    setError(null);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if (userInput.toLowerCase().includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || userInput.toLowerCase().includes('—Å—Ç–∞—Ç')) {
      showKnowledgeBaseStats();
      addToast('info', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
      return;
    }

    if (appStep === 'awaiting_description') {
      setIsLoading(true);
      addMessage("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 'bot', true);
      setAppStep('parsing_description');
      setFormData([]); 
      setLastCalculatedFormData(null); 
      addToast('info', '–û–±—Ä–∞–±–æ—Ç–∫–∞', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const parsedDataArray = await parseOrderFromStringWithGeminiOptimized(userInput);
        setChatMessages(prev => prev.filter(m => !m.isLoading));

        if (!parsedDataArray || parsedDataArray.length === 0 || parsedDataArray.some(data => Object.keys(data).length === 0 || !data.productType)) {
          addMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏) –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É.", 'error');
          addToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞');
          setAppStep('awaiting_description');
        } else {
          setFormData(parsedDataArray.map(data => ({ ...data, parsedUserRequest: userInput })));
          setAppStep('awaiting_confirmation');
          addToast('success', '–£—Å–ø–µ—à–Ω–æ', `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${parsedDataArray.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞`);
        }
      } catch (e: any) {
        logger.error('Error parsing user input', e, { 
          userInput: userInput.substring(0, 100),
          appStep 
        });
        
        setChatMessages(prev => prev.filter(m => !m.isLoading));
        let userErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
        const errorMessageString = String(e?.message || e || '').toLowerCase();

        if (errorMessageString.includes("–Ω–µ–≤–µ—Ä–Ω—ã–π api –∫–ª—é—á gemini")) {
            userErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º Gemini. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        } else if (errorMessageString.includes("502") || errorMessageString.includes("proxying failed") || errorMessageString.includes("readablestream")) {
            userErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º Gemini (–≤–æ–∑–º–æ–∂–Ω–æ, —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é. (–ö–æ–¥: 502/Proxy)";
        } else if (e?.message) {
             userErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
        }
        addMessage(userErrorMessage, 'error');
        addToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å');
        setAppStep('awaiting_description');
      } finally {
        setIsLoading(false);
      }
    } else if (appStep === 'awaiting_confirmation') {
      const confirmation = userInput.trim().toLowerCase();
      if (confirmation === '–¥–∞' || confirmation === '–¥' || confirmation === 'yes' || confirmation === 'y') {
        setIsLoading(true);
        addMessage("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...", 'bot', true);
        setAppStep('calculating_cost');
        addToast('info', '–†–∞—Å—á–µ—Ç', '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏...');
        
        const results = [];
        const newOrderIds: string[] = [];

        for (let i = 0; i < formData.length; i++) {
            const variant = formData[i];
            const quantityInfo = variant.quantity ? ` (–¢–∏—Ä–∞–∂: ${variant.quantity})` : '';
            const variantLoadingMessage = `–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1}${quantityInfo}...`;
            addMessage(variantLoadingMessage, 'bot', true);

            if (!variant.productType || !variant.material || !variant.width || !variant.height || (!variant.depth && String(variant.productType) !== ProductType.TISSUE_PAPER) || !variant.quantity) {
                 setChatMessages(prev => prev.filter(m => m.text !== variantLoadingMessage)); 
                 addMessage(`–í–∞—Ä–∏–∞–Ω—Ç ${i + 1}: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ç–∏–ø, –º–∞—Ç–µ—Ä–∏–∞–ª, —Ä–∞–∑–º–µ—Ä—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å.`, 'error');
                 addToast('error', '–û—à–∏–±–∫–∞', `–í–∞—Ä–∏–∞–Ω—Ç ${i + 1}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
                 results.push({success: false, text: `–í–∞—Ä–∏–∞–Ω—Ç ${i+1}: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö.`});
                 continue; 
            }
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
                const resultTextFromGemini = await estimatePackagingCostWithKnowledgeBase(variant as FormData);
                setChatMessages(prev => prev.filter(m => m.text !== variantLoadingMessage));
                
                const unitCostMatch = resultTextFromGemini.match(/(\d+\.?\d*)\s*¬•\s*–∑–∞\s*–µ–¥–∏–Ω–∏—Ü—É/);
                const totalCostMatch = resultTextFromGemini.match(/–û–±—â–∞—è\s*—Å—É–º–º–∞:\s*(\d+\.?\d*)\s*¬•/);
                
                let formattedResultText = resultTextFromGemini;

                if (unitCostMatch && totalCostMatch) {
                    const estimatedCostPerUnit = parseFloat(unitCostMatch[1]);
                    const totalEstimatedCost = parseFloat(totalCostMatch[1]);

                    const costPerUnitLower = estimatedCostPerUnit * 0.85;
                    const costPerUnitUpper = estimatedCostPerUnit * 1.15;
                    const totalCostLower = totalEstimatedCost * 0.85;
                    const totalCostUpper = totalEstimatedCost * 1.15;
                    
                    const noteMatch = resultTextFromGemini.match(/\.\s*([^.]*?\.\s*–û–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É[^.]*\.)$/i);
                    const note = noteMatch && noteMatch[1] ? noteMatch[1].trim() : "–†–∞—Å—á–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π. –î–ª—è —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã –æ–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É.";

                    formattedResultText = `–ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏: ${costPerUnitLower.toFixed(2)} - ${costPerUnitUpper.toFixed(2)} ¬• –∑–∞ –µ–¥–∏–Ω–∏—Ü—É. 
–û–±—â–∞—è —Å—É–º–º–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ${totalCostLower.toFixed(2)} - ${totalCostUpper.toFixed(2)} ¬•. 
${note}`;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                    try {
                        const orderId = saveOrderToKnowledgeBase(variant as FormData, estimatedCostPerUnit);
                        newOrderIds.push(orderId);
                        logger.info('Order saved to knowledge base', undefined, { 
                          orderId,
                          variantIndex: i,
                          productType: variant.productType 
                        });
                    } catch (saveError) {
                        logger.error('Error saving order to knowledge base', saveError as Error, { 
                          variantIndex: i,
                          productType: variant.productType 
                        });
                    }
                }
                
                const resultPrefix = formData.length > 1 ? `–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –í–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1} (–¢–∏—Ä–∞–∂: ${variant.quantity}):\n` : '';
                addMessage(resultPrefix + formattedResultText, 'bot');
                results.push({success: true, text: resultPrefix + formattedResultText});

            } catch (e:any) {
                logger.error('Error calculating cost for variant', e, { 
                  variantIndex: i,
                  productType: variant.productType,
                  quantity: variant.quantity 
                });
                
                setChatMessages(prev => prev.filter(m => m.text !== variantLoadingMessage));
                const errorPrefix = formData.length > 1 ? `–û—à–∏–±–∫–∞ –¥–ª—è –í–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1} (–¢–∏—Ä–∞–∂: ${variant.quantity}):\n` : '';
                let calcErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
                const errorMessageString = String(e?.message || e || '').toLowerCase();

                if (errorMessageString.includes("–Ω–µ–≤–µ—Ä–Ω—ã–π api –∫–ª—é—á gemini")) {
                    calcErrorMessage = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Gemini –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.";
                } else if (errorMessageString.includes("502") || errorMessageString.includes("proxying failed") || errorMessageString.includes("readablestream")) {
                    calcErrorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º Gemini (–≤–æ–∑–º–æ–∂–Ω–æ, —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫) –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. (–ö–æ–¥: 502/Proxy)";
                } else if (e?.message) {
                    calcErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: ${e.message}`;
                }
                addMessage(errorPrefix + calcErrorMessage, 'error');
                addToast('error', '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞', `–í–∞—Ä–∏–∞–Ω—Ç ${i + 1}: ${e.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
                results.push({success: false, text: errorPrefix + `–û—à–∏–±–∫–∞: ${e.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`});
            }
        }
        setChatMessages(prev => prev.filter(m => m.text !== "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")); 
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
        setSavedOrderIds(newOrderIds);
        
        setIsLoading(false);
        setAppStep('displaying_result');
        addToast('success', '–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.filter(r => r.success).length} –∏–∑ ${results.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);

      } else if (confirmation === '–Ω–µ—Ç' || confirmation === '–Ω' || confirmation === 'no' || confirmation === 'n') {
        addMessage("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", 'bot');
        setAppStep('awaiting_description');
        setFormData([]);
        setLastCalculatedFormData(null);
        addToast('info', '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ', '–û–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ');
      } else {
        addMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.", 'bot');
        addToast('warning', '–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç', '–û—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"');
      }
    } else if (appStep === 'awaiting_feedback_or_new_order') {
        setIsLoading(true);
        addMessage("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", 'bot', true);
        let feedbackProcessedSuccessfully = false;

        try {
            setAppStep('processing_correction');
            const corrections = await parsePriceCorrectionFeedback(userInput, lastCalculatedFormData || []);
            setChatMessages(prev => prev.filter(m => !m.isLoading));

            if (corrections && corrections.length > 0) {
                let feedbackMessage = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–Ω!\n";
                corrections.forEach(corr => {
                    feedbackMessage += `- –î–ª—è —Ç–∏—Ä–∞–∂–∞ ${corr.quantity} —à—Ç. —É—á—Ç–µ–Ω–∞ —Ü–µ–Ω–∞ ${corr.correctedPricePerUnit.toFixed(2)} ¬•.\n`;
                });
                feedbackMessage += "\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.";
                addMessage(feedbackMessage, 'bot');
                addToast('success', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π');
                feedbackProcessedSuccessfully = true;
            } else {
                // –≠—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                addMessage("–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 'bot', true);
                setAppStep('parsing_description');
                setFormData([]); 
                setLastCalculatedFormData(null); 
                const parsedDataArray = await parseOrderFromStringWithGeminiOptimized(userInput);
                setChatMessages(prev => prev.filter(m => m.text === "–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." || m.text === "–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...").filter(m => !m.isLoading));

                if (!parsedDataArray || parsedDataArray.length === 0 || parsedDataArray.some(data => Object.keys(data).length === 0 || !data.productType)) {
                    addMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", 'error');
                    addToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
                    setAppStep('awaiting_description');
                } else {
                    setFormData(parsedDataArray.map(data => ({ ...data, parsedUserRequest: userInput })));
                    setAppStep('awaiting_confirmation');
                    addToast('success', '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${parsedDataArray.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
                }
                setIsLoading(false);
                return;
            }
        } catch (e: any) {
            setChatMessages(prev => prev.filter(m => !m.isLoading));
            let feedbackErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑.`;
            const errorMessageString = String(e?.message || e || '').toLowerCase();
            if (errorMessageString.includes("–Ω–µ–≤–µ—Ä–Ω—ã–π api –∫–ª—é—á gemini")) {
                 feedbackErrorMessage = `–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Gemini: ${e.message}. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
            } else if (errorMessageString.includes("502") || errorMessageString.includes("proxying failed") || errorMessageString.includes("readablestream")) {
                 feedbackErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º Gemini (–≤–æ–∑–º–æ–∂–Ω–æ, —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä) –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –û—à–∏–±–∫–∞: ${e.message}`;
            } else if (e?.message) {
                feedbackErrorMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑.`;
            }
            addMessage(feedbackErrorMessage, 'error');
            addToast('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç');
            setAppStep('awaiting_description');
        } finally {
            setIsLoading(false); 

            if (feedbackProcessedSuccessfully) {
                addMessage("–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.", 'bot');
            }
            
            setAppStep('awaiting_description');
            setFormData([]);
            setLastCalculatedFormData(null);
        }
    } else if (appStep === 'error_state') { 
        addMessage("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.", 'bot');
        setAppStep('awaiting_description');
        setFormData([]);
        setLastCalculatedFormData(null);
        addToast('info', '–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑');
    }
  };

  const handleTemplateSelect = (template: string) => {
    handleUserInput(template);
  };

  const handleShowHistory = () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —á–∞—Ç–µ
    const historyMessage = history.length > 0 
      ? `–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n${history.slice(0, 5).map((item, index) => 
          `${index + 1}. ${item.text.substring(0, 50)}${item.text.length > 50 ? '...' : ''}`
        ).join('\n')}`
      : '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞';
    addMessage(historyMessage, 'info');
  };

  const handleShowStats = () => {
    showKnowledgeBaseStats();
  };

  const isInputDisabled = isLoading || appStep === 'parsing_description' || appStep === 'calculating_cost' || appStep === 'processing_correction';

  return (
    <div className="flex flex-col items-center justify-center w-full min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 p-3 md:p-4">
      {/* Background decorations with animation */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-teal-500/20 rounded-full blur-3xl animate-pulse-slow"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl animate-pulse-slow" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse-slow" style={{ animationDelay: '4s' }}></div>
      </div>
      
      <header className="w-full max-w-2xl mb-4 md:mb-6 text-center relative z-10 animate-in fade-in duration-700">
        <div className="flex items-center justify-center mb-2 md:mb-3">
          <div className="relative">
            <CalculatorIcon className="h-8 w-8 md:h-10 md:w-10 text-teal-400 mr-2 md:mr-3 animate-in scale-in duration-500" />
            <div className="absolute inset-0 bg-teal-400/20 rounded-full blur-lg animate-pulse"></div>
          </div>
          <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-teal-400 via-blue-400 to-purple-400 animate-in slide-in-from-bottom duration-700">
            –ß–∞—Ç-–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –£–ø–∞–∫–æ–≤–∫–∏
          </h1>
        </div>
        <p className="text-sm md:text-base text-gray-400 animate-in slide-in-from-bottom duration-700" style={{ animationDelay: '200ms' }}>
          –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑, –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.
        </p>
        <button 
          onClick={showKnowledgeBaseStats}
          className="mt-2 md:mt-3 px-3 py-1 md:px-4 md:py-2 text-xs md:text-sm bg-blue-600/20 hover:bg-blue-600/30 text-blue-300 hover:text-blue-200 rounded-lg transition-all duration-200 hover:scale-105 active:scale-95 border border-blue-500/30 hover:border-blue-500/50 animate-in slide-in-from-bottom duration-700"
          style={{ animationDelay: '400ms' }}
        >
          üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </button>
      </header>
      
      <div className="relative z-10 w-full animate-in fade-in duration-1000" style={{ animationDelay: '600ms' }}>
        <ChatWindow
          messages={chatMessages}
          onSendMessage={handleUserInput}
          isLoading={isLoading && (appStep === 'parsing_description' || appStep === 'calculating_cost' || appStep === 'processing_correction')}
          isInputDisabled={isInputDisabled}
        />
      </div>

      {/* Loading State Overlay */}
      {isLoading && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 animate-in fade-in duration-300">
          <div className="w-full max-w-md mx-4">
            <LoadingState
              step={
                appStep === 'parsing_description' ? 'parsing' :
                appStep === 'calculating_cost' ? 'calculating' :
                appStep === 'processing_correction' ? 'processing' : 'parsing'
              }
              variant={formData.length > 0 ? formData.length : 1}
              totalVariants={formData.length > 0 ? formData.length : 1}
            />
          </div>
        </div>
      )}

      {/* Quick Actions for mobile */}
      <div className="relative z-10 w-full max-w-2xl mt-4 md:hidden">
        <QuickActions
          onTemplateSelect={handleTemplateSelect}
          onShowHistory={handleShowHistory}
          onShowStats={handleShowStats}
        />
      </div>

      {error && !isLoading && appStep !== 'calculating_cost' && appStep !== 'parsing_description' && appStep !== 'processing_correction' && (
        <div className="relative z-10 w-full max-w-2xl mt-4 animate-in slide-in-from-bottom duration-300">
          <ChatErrorMessage message={error} onClose={() => setError(null)} />
        </div>
      )}
      
      <footer className="w-full max-w-2xl mt-6 md:mt-8 text-center text-gray-500 text-xs md:text-sm relative z-10 animate-in fade-in duration-700" style={{ animationDelay: '800ms' }}>
        <p>&copy; {new Date().getFullYear()} AI Packaging Estimator. –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏.</p>
        <p className="mt-1">–ù–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.</p>
      </footer>

      {/* Toast Container */}
      <ToastContainer toasts={toasts} onClose={removeToast} />
      
      {/* Monitoring Dashboard */}
      <MonitoringDashboard />
    </div>
  );
};

export default App;
